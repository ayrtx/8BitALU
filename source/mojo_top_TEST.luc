module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [1][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                  // reset signal
  sig alufn;
  sig a;
  sig b;
  sig result[8];
    
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    //.rst(rst) {multi_seven_seg seg;}
    fsm fsmtesting = {NOERROR, ERROR}; 
    fsm fsmalufn = {ADD, SUB, MULT, ABS, AND, OR, XOR, A, B, NAND, NOR, XNOR, CONSTM1, CONST0, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE, CMPGT, CMPGE}; 
    fsm fsma = {A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, A44, A45, A46, A47, A48, A49, A50, A51, A52, A53, A54, A55, A56, A57, A58, A59, A60, A61, A62, A63, A64, A65, A66, A67, A68, A69, A70, A71, A72, A73, A74, A75, A76, A77, A78, A79, A80, A81, A82, A83, A84, A85, A86, A87, A88, A89, A90, A91, A92, A93, A94, A95, A96, A97, A98, A99, A100, A101, A102, A103, A104, A105, A106, A107, A108, A109, A110, A111, A112, A113, A114, A115, A116, A117, A118, A119, A120, A121, A122, A123, A124, A125, A126, A127, A128, A129, A130, A131, A132, A133, A134, A135, A136, A137, A138, A139, A140, A141, A142, A143, A144, A145, A146, A147, A148, A149, A150, A151, A152, A153, A154, A155, A156, A157, A158, A159, A160, A161, A162, A163, A164, A165, A166, A167, A168, A169, A170, A171, A172, A173, A174, A175, A176, A177, A178, A179, A180, A181, A182, A183, A184, A185, A186, A187, A188, A189, A190, A191, A192, A193, A194, A195, A196, A197, A198, A199, A200, A201, A202, A203, A204, A205, A206, A207, A208, A209, A210, A211, A212, A213, A214, A215, A216, A217, A218, A219, A220, A221, A222, A223, A224, A225, A226, A227, A228, A229, A230, A231, A232, A233, A234, A235, A236, A237, A238, A239, A240, A241, A242, A243, A244, A245, A246, A247, A248, A249, A250, A251, A252, A253, A254, A255}; 
    fsm fsmb = {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31, B32, B33, B34, B35, B36, B37, B38, B39, B40, B41, B42, B43, B44, B45, B46, B47, B48, B49, B50, B51, B52, B53, B54, B55, B56, B57, B58, B59, B60, B61, B62, B63, B64, B65, B66, B67, B68, B69, B70, B71, B72, B73, B74, B75, B76, B77, B78, B79, B80, B81, B82, B83, B84, B85, B86, B87, B88, B89, B90, B91, B92, B93, B94, B95, B96, B97, B98, B99, B100, B101, B102, B103, B104, B105, B106, B107, B108, B109, B110, B111, B112, B113, B114, B115, B116, B117, B118, B119, B120, B121, B122, B123, B124, B125, B126, B127, B128, B129, B130, B131, B132, B133, B134, B135, B136, B137, B138, B139, B140, B141, B142, B143, B144, B145, B146, B147, B148, B149, B150, B151, B152, B153, B154, B155, B156, B157, B158, B159, B160, B161, B162, B163, B164, B165, B166, B167, B168, B169, B170, B171, B172, B173, B174, B175, B176, B177, B178, B179, B180, B181, B182, B183, B184, B185, B186, B187, B188, B189, B190, B191, B192, B193, B194, B195, B196, B197, B198, B199, B200, B201, B202, B203, B204, B205, B206, B207, B208, B209, B210, B211, B212, B213, B214, B215, B216, B217, B218, B219, B220, B221, B222, B223, B224, B225, B226, B227, B228, B229, B230, B231, B232, B233, B234, B235, B236, B237, B238, B239, B240, B241, B242, B243, B244, B245, B246, B247, B248, B249, B250, B251, B252, B253, B254, B255}; 
    .rst(rst){timeinputname changeState; }// instantiate a copy of timeChange and named it changeState
  }
  
  adder adder;
  zvn zvn;
  mult mult;
  shifter8 shifter;
  compare8 compare;
  boolean boolean;
  //bin_to_dec binDec;
  
  always {
  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  alufn=0;
  a=0;
  b=0;
 
  io_led[0] = 0;
  
  adder.alufn=alufn;
  adder.a = a;
  adder.b = b;
    
  zvn.a = a;
  zvn.b = b;
  zvn.alufn = alufn;
  
  mult.a = a;
  mult.b = b;
  mult.alufn = alufn;
  
  shifter.alufn=alufn;
  shifter.a = a;
  shifter.b = b;
  
  compare.alufn=alufn;
  compare.z = zvn.z;
  compare.v = zvn.v;
  compare.n = zvn.n;
  
  boolean.alufn=alufn;
  boolean.a = a;
  boolean.b = b;
    
  //seg.values = {4h0,4h0,4h0,4h0};
  //io_seg = ~seg.seg; // connect segments to the driver
  //io_sel = ~seg.sel; // connect digit select to the driver  

  result = 0;
  
  case(alufn){
      b000000: 
        io_led[0] = adder.sum;
        result = adder.sum;
      b000001: 
        io_led[0] = adder.sum;
        result = adder.sum;
      b000010: 
        io_led[0] = mult.multiplied;
        result = mult.multiplied;
      b000011: 
        io_led[0] = mult.multiplied;
        result = mult.multiplied;
      b011000: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b011110: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b010110: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b011010: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b010101: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b010111: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b010001: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b011001: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b011111: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b010000: 
        io_led[0] = boolean.boole;
        result = boolean.boole;
      b100000: 
        io_led[0] = shifter.shift;
        result = shifter.shift;
      b100001: 
        io_led[0] = shifter.shift;
        result = shifter.shift;
      b100011: 
        io_led[0] = shifter.shift;
        result = shifter.shift;
      b100100: 
        io_led[0] = shifter.shift;
        result = shifter.shift;
      b100101: 
        io_led[0] = shifter.shift;
        result = shifter.shift;
      b110011: 
        io_led[0] = compare.cmp;
        result = compare.cmp;
      b110101: 
        io_led[0] = compare.cmp;
        result = compare.cmp;
      b110111: 
        io_led[0] = compare.cmp;
        result = compare.cmp;
      b111001: 
        io_led[0] = compare.cmp;
        result = compare.cmp;
      b111011: 
        io_led[0] = compare.cmp;
        result = compare.cmp;
      }
  }
  if (changeState.currentCounter==26b1) {
    b++;
    if (b>255||(alufn[5:4]==b10 && b>7)) {
      b = 0;
      a++;
      if (a>255) {
        a = 0;
        alufn++;
        if (alufn > 63) alufn = 0;
  }
}