module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                  // reset signal
  sig mode;
  sig result[8];
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
        timeinputname changeState;
        dff test_case_counter[8];
        //multi_seven_seg seg;
        fsm state(.clk(clk), #INIT(RESET)) = {RESET, ADD_TEST1, ADD_TEST2, SUB_TEST1, SUB_TEST2, MULT_TEST1, MULT_TEST2, ABS_TEST1, ABS_TEST2, AND_TEST1, AND_TEST2, OR_TEST1, OR_TEST2, XOR_TEST1, XOR_TEST2, A_TEST1, A_TEST2, B_TEST1, B_TEST2, NAND_TEST1, NAND_TEST2, NOR_TEST1, NOR_TEST2, XNOR_TEST1, XNOR_TEST2, CONSTM1_TEST1, CONSTM1_TEST2, CONST0_TEST1, CONST0_TEST2, SHL_TEST1, SHL_TEST2, SHR_TEST1, SHR_TEST2, SRA_TEST1, SRA_TEST2, CMPEQ_TEST1, CMPEQ_TEST2, CMPLT_TEST1, CMPLT_TEST2, CMPLE_TEST1, CMPLE_TEST2, CMPGT_TEST1, CMPGT_TEST2, CMPGE_TEST1, CMPGE_TEST2, ERROR, END};
    }
  }
  
  adder adder;
  zvn zvn;
  mult mult;
  shifter8 shifter;
  compare8 compare;
  boolean boolean;
  //bin_to_dec binDec;
  
  always {
  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  io_led[0] = c{0,0,0,0,0,0,0,0};
  //binDec.value = c{0,0,0,0,0,0,0,0};
  
      adder.alufn=io_dip[2][5:0];
      adder.a = io_dip[1];
      adder.b = io_dip[0];
        
      zvn.a = io_dip[1];
      zvn.b = io_dip[0];
      zvn.alufn = io_dip[2][5:0];
      
      mult.a = io_dip[1];
      mult.b = io_dip[0];
      mult.alufn = io_dip[2][5:0];
      
      shifter.alufn=io_dip[2][5:0];
      shifter.a = io_dip[1];
      shifter.b = io_dip[0];
      
      compare.alufn=io_dip[2][5:0];
      compare.z = zvn.z;
      compare.v = zvn.v;
      compare.n = zvn.n;
      
      boolean.alufn=io_dip[2][5:0];
      boolean.a = io_dip[1];
      boolean.b = io_dip[0];
  
      result = 0;
      io_led[0] = 0;
      io_led[1] = 0;

  mode = io_dip[2][7];
  
  case(mode) {
    b0:
      adder.alufn=io_dip[2][5:0];
      adder.a = io_dip[1];
      adder.b = io_dip[0];
        
      zvn.a = io_dip[1];
      zvn.b = io_dip[0];
      zvn.alufn = io_dip[2][5:0];
      
      mult.a = io_dip[1];
      mult.b = io_dip[0];
      mult.alufn = io_dip[2][5:0];
      
      shifter.alufn=io_dip[2][5:0];
      shifter.a = io_dip[1];
      shifter.b = io_dip[0];
      
      compare.alufn=io_dip[2][5:0];
      compare.z = zvn.z;
      compare.v = zvn.v;
      compare.n = zvn.n;
      
      boolean.alufn=io_dip[2][5:0];
      boolean.a = io_dip[1];
      boolean.b = io_dip[0];
        
      case(io_dip[2][5:0]){
        b000000: result = adder.sum;
        b000001: result = adder.sum;
        b000010: result = mult.multiplied;
        b000011: result = mult.multiplied;
        b011000: result = boolean.boole;
        b011110: result = boolean.boole;
        b010110: result = boolean.boole;
        b011010: result = boolean.boole;
        b010101: result = boolean.boole;
        b010111: result = boolean.boole;
        b010001: result = boolean.boole;
        b011001: result = boolean.boole;
        b011111: result = boolean.boole;
        b010000: result = boolean.boole;
        b100000: result = shifter.shift;
        b100001: result = shifter.shift;
        b100011: result = shifter.shift;
        b100100: result = shifter.shift;
        b100101: result = shifter.shift;
        b110011: result = compare.cmp;
        b110101: result = compare.cmp;
        b110111: result = compare.cmp;
        b111001: result = compare.cmp;
        b111011: result = compare.cmp;
        }
      
    b1:
      case(state.q) {
    
        state.RESET:
            if (changeState.currentCounter == 26b1)
                test_case_counter.d = 0;
                io_led[0] = 0;
                io_led[1] = 0;
                result = 0;
                state.d = state.ADD_TEST1;
        state.ERROR: // Stop Machine at test case number
            io_led[0] = test_case_counter.q;
            io_led[1] = test_case_counter.q;
            result = test_case_counter.q;
        state.END: // Stop Machine at end of test cases
            io_led[0] = b11111111;
            io_led[1] = b11111111;
            result = b11111111;
        
        state.ADD_TEST1: //Test case 1: 100+28 = -128
            test_case_counter.d = test_case_counter.q+1;
            adder.alufn = b000000; 
            adder.a = b01100100;
            adder.b = b00011100;
            result = adder.sum; 
            io_led[0] = b01100100;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b10000000) state.d = state.ADD_TEST2;
                else state.d = state.ERROR;
        state.ADD_TEST2: //Test case 2: 70 + 12 = 82
            test_case_counter.d = test_case_counter.q+1;
            adder.alufn = b000000; 
            adder.a = b01000110;
            adder.b = b00001100;
            result = adder.sum; 
            io_led[0] = b01000110;
            io_led[1] = b00001100;
            if (changeState.currentCounter == 26b1)
                if (result == b01010010) state.d = state.SUB_TEST1;
                else state.d = state.ERROR;
        
        state.SUB_TEST1: //Test case 3: 100-28 = 72
            test_case_counter.d = test_case_counter.q+1;
            adder.alufn = b000001; 
            adder.a = b01100100;
            adder.b = b00011100;
            result = adder.sum; 
            io_led[0] = b01100100;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b01001000) state.d = state.SUB_TEST2;
                else state.d = state.ERROR;
        state.SUB_TEST2: //Test case 4: 70-12 = 58
            test_case_counter.d = test_case_counter.q+1;
            adder.alufn = b000001; 
            adder.a = b01000110;
            adder.b = b00001100;
            result = adder.sum; 
            io_led[0] = b01000110;
            io_led[1] = b00001100;
            if (changeState.currentCounter == 26b1)
                if (result == b00111010) state.d = state.MULT_TEST1;
                else state.d = state.ERROR;
        
        state.MULT_TEST1: //Test case 5: 7*2 = 14
            test_case_counter.d = test_case_counter.q+1;
            mult.alufn = b000010; 
            mult.a = b0000111;
            mult.b = b0000010;
            result = mult.multiplied; 
            io_led[0] = b0000111;
            io_led[1] = b0000010;
            if (changeState.currentCounter == 26b1)
                if (result == b00001110) state.d = state.MULT_TEST2;
                else state.d = state.ERROR;
        state.MULT_TEST2: //Test case 6: 17*6=102
            test_case_counter.d = test_case_counter.q+1;
            mult.alufn = b000010; 
            mult.a = b00010001;
            mult.b = b00000110;
            result = mult.multiplied;
            io_led[0] = b00010001;
            io_led[1] = b00000110;
            if (changeState.currentCounter == 26b1)
                if (result == b01100110) state.d = state.ABS_TEST1;
                else state.d = state.ERROR;
        
        state.ABS_TEST1: //Test case 7: |-127| = 127
            test_case_counter.d = test_case_counter.q+1;
            mult.alufn = b000011; 
            mult.a = b10000001;
            mult.b = b00011100;
            result = mult.multiplied; 
            io_led[0] = b10000001;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b01111111) state.d = state.ABS_TEST2;
                else state.d = state.ERROR;
        state.ABS_TEST2: //Test case 8: |-14| = 14
            test_case_counter.d = test_case_counter.q+1;
            mult.alufn = b000011; 
            mult.a = b11110010;
            mult.b = b11110010;
            result = mult.multiplied; 
            io_led[0] = b11110010;
            io_led[1] = b11110010;
            if (changeState.currentCounter == 26b1)
                if (result == b00001110) state.d = state.AND_TEST1;
                else state.d = state.ERROR;
        
        state.AND_TEST1: //Test case 9: 50 & 49 = 48
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011000; 
            boolean.a = b00110010;
            boolean.b = b00110001;
            result = boolean.boole; 
            io_led[0] = b00110010;
            io_led[1] = b00110001;
            if (changeState.currentCounter == 26b1)
                if (result == b00110000) state.d = state.AND_TEST2;
                else state.d = state.ERROR;
        state.AND_TEST2: //Test case 10: 13 & 18 = 0
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011000; 
            boolean.a = b00001101;
            boolean.b = b00010010;
            result = boolean.boole; 
            io_led[0] = b00001101;
            io_led[1] = b00010010;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.OR_TEST1;
                else state.d = state.ERROR;
        
        state.OR_TEST1: //Test case 11: 47 || 63 =63
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011110; 
            boolean.a = b00101111;
            boolean.b = b00111111;
            result = boolean.boole; 
            io_led[0] = b00101111;
            io_led[1] = b00111111;
            if (changeState.currentCounter == 26b1)
                if (result == b00111111) state.d = state.OR_TEST2;
                else state.d = state.ERROR;
        state.OR_TEST2: //Test case 12: 23 || 42 =63
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011110; 
            boolean.a = b00010111;
            boolean.b = b00101010;
            result = boolean.boole; 
            io_led[0] = b00010111;
            io_led[1] = b00101010;
            if (changeState.currentCounter == 26b1)
                if (result == b00111111) state.d = state.XOR_TEST1;
                else state.d = state.ERROR;
        
        state.XOR_TEST1: //Test case 13: 74 ^ 13 = 71
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010110; 
            boolean.a = b01001010;
            boolean.b = b00001101;
            result = boolean.boole; 
            io_led[0] = b01001010;
            io_led[1] = b00001101;
            if (changeState.currentCounter == 26b1)
                if (result == b01000111) state.d = state.XOR_TEST2;
                else state.d = state.ERROR;
        state.XOR_TEST2: //Test case 14: 00110011 ^ 01010101 = 01100110
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010110; 
            boolean.a = b00110011;
            boolean.b = b01010101;
            result = boolean.boole; 
            io_led[0] = b00110011;
            io_led[1] = b01010101;
            if (changeState.currentCounter == 26b1)
                if (result == b01100110) state.d = state.A_TEST1;
                else state.d = state.ERROR;
        
        state.A_TEST1: //Test case 15: 33=33
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011010; 
            boolean.a = b00100001;
            boolean.b = b00111100;
            result = boolean.boole; 
            io_led[0] = b00100001;
            io_led[1] = b00111100;
            if (changeState.currentCounter == 26b1)
                if (result == b00100001) state.d = state.A_TEST2;
                else state.d = state.ERROR;
        state.A_TEST2: //Test case 16: result = b10110100
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011010; 
            boolean.a = b10110100;
            boolean.b = b00111100;
            result = boolean.boole; 
            io_led[0] = b10110100;
            io_led[1] = b00111100;
            if (changeState.currentCounter == 26b1)
                if (result == b10110100) state.d = state.B_TEST1;
                else state.d = state.ERROR;
        
        state.B_TEST1: //Test case 17: 60=60
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010101; 
            boolean.a = b00100001;
            boolean.b = b00111100;
            result = boolean.boole; 
            io_led[0] = b00100001;
            io_led[1] = b00111100;
            if (changeState.currentCounter == 26b1)
                if (result == b00111100) state.d = state.B_TEST2;
                else state.d = state.ERROR;
        state.B_TEST2: //Test case 18: result = b
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010101; 
            boolean.a = b00100001;
            boolean.b = b11000011;
            result = boolean.boole; 
            io_led[0] = b00100001;
            io_led[1] = b11000011;
            if (changeState.currentCounter == 26b1)
                if (result == b11000011) state.d = state.NAND_TEST1;
                else state.d = state.ERROR;
        
        state.NAND_TEST1: //Test case 19: ~(103 & 32)  = -65
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010111; 
            boolean.a = b01100111;
            boolean.b = b00011100;
            result = boolean.boole; 
            io_led[0] = b01100111;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b01000001) state.d = state.NAND_TEST2;
                else state.d = state.ERROR;
        state.NAND_TEST2: //Test case 20: 10011001 !& 01100111 = 11111110
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010111; 
            boolean.a = b10011001;
            boolean.b = b01100111;
            result = boolean.boole; 
            io_led[0] = b10011001;
            io_led[1] = b01100111;
            if (changeState.currentCounter == 26b1)
                if (result == b11111110) state.d = state.NOR_TEST1;
                else state.d = state.ERROR;
        
        state.NOR_TEST1: //Test case 21: ~(13 | 24) = -30
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010001; 
            boolean.a = b00001101;
            boolean.b = b00011000;
            result = boolean.boole; 
            io_led[0] = b00001101;
            io_led[1] = b00011000;
            if (changeState.currentCounter == 26b1)
                if (result == b00011110) state.d = state.NOR_TEST2;
                else state.d = state.ERROR;
        state.NOR_TEST2: //Test case 22: 00011001 !| 01100111 = 10000000
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010001; 
            boolean.a = b00011001;
            boolean.b = b01100111;
            result = boolean.boole; 
            io_led[0] = b00011001;
            io_led[1] = b01100111;
            if (changeState.currentCounter == 26b1)
                if (result == b10000000) state.d = state.XNOR_TEST1;
                else state.d = state.ERROR;
        
        state.XNOR_TEST1: //Test case 23: 10101010 ^ 11110000 = 10100101
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011001; 
            boolean.a = b10101010;
            boolean.b = b11110000;
            result = boolean.boole; 
            io_led[0] = b10101010;
            io_led[1] = b11110000;
            if (changeState.currentCounter == 26b1)
                if (result == b10100101) state.d = state.XNOR_TEST2;
                else state.d = state.ERROR;
        state.XNOR_TEST2: //Test case 24: 10001000 ^ 11110000 = 10000111
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011001; 
            boolean.a = b10001000;
            boolean.b = b11110000;
            result = boolean.boole; 
            io_led[0] = b10001000;
            io_led[1] = b11110000;
            if (changeState.currentCounter == 26b1)
                if (result == b10000111) state.d = state.CONSTM1_TEST1;
                else state.d = state.ERROR;
    
        state.CONSTM1_TEST1: //Test case 25: result = b11111111
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011111; 
            boolean.a = b01100100;
            boolean.b = b00011100;
            result = boolean.boole; 
            io_led[0] = b01100100;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b11111111) state.d = state.CONSTM1_TEST2;
                else state.d = state.ERROR;
        state.CONSTM1_TEST2: //Test case 26: result = b11111111
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b011111; 
            boolean.a = b01111100;
            boolean.b = b00000100;
            result = boolean.boole; 
            io_led[0] = b01111100;
            io_led[1] = b00000100;
            if (changeState.currentCounter == 26b1)
                if (result == b11111111) state.d = state.CONST0_TEST1;
                else state.d = state.ERROR;
    
        state.CONST0_TEST1: //Test case 27: result = b00000000
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010000; 
            boolean.a = b01100100;
            boolean.b = b00011100;
            result = boolean.boole; 
            io_led[0] = b01100100;
            io_led[1] = b00011100;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.CONST0_TEST2;
                else state.d = state.ERROR;
        state.CONST0_TEST2: //Test case 28: result = b00000000
            test_case_counter.d = test_case_counter.q+1;
            boolean.alufn = b010000; 
            boolean.a = b01111100;
            boolean.b = b00000100;
            result = boolean.boole; 
            io_led[0] = b01111100;
            io_led[1] = b00000100;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.SHL_TEST1;
                else state.d = state.ERROR;
    
        state.SHL_TEST1: //Test case 29: 01100100 <<< 00000001 = 11001000
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100000; 
            shifter.a = b01100100;
            shifter.b = b00000001;
            result = shifter.shift; 
            io_led[0] = b01100100;
            io_led[1] = b00000001;
            if (changeState.currentCounter == 26b1)
                if (result == b11001000) state.d = state.SHL_TEST2;
                else state.d = state.ERROR;
        state.SHL_TEST2: //Test case 30: 01100100 <<< 00000010 = 10010000
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100000; 
            shifter.a = b01100100;
            shifter.b = b00000010;
            result = shifter.shift; 
            io_led[0] = b01100100;
            io_led[1] = b00000010;
            if (changeState.currentCounter == 26b1)
                if (result == b10010000) state.d = state.SHR_TEST1;
                else state.d = state.ERROR;
    
        state.SHR_TEST1: //Test case 31: 01100100 >>> 00000001 = 00110010
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100001; 
            shifter.a = b01100100;
            shifter.b = b00000001;
            result = shifter.shift; 
            io_led[0] = b01100100;
            io_led[1] = b00000001;
            if (changeState.currentCounter == 26b1)
                if (result == b00110010) state.d = state.SHR_TEST2;
                else state.d = state.ERROR;
        state.SHR_TEST2: //Test case 32: 01100100 >>> 00000011 = 00001100
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100001; 
            shifter.a = b01100100;
            shifter.b = b00000011;
            result = shifter.shift; 
            io_led[0] = b01100100;
            io_led[1] = b00000011;
            if (changeState.currentCounter == 26b1)
                if (result == b00001100) state.d = state.SRA_TEST1;
                else state.d = state.ERROR;
    
        state.SRA_TEST1: //Test case 33: 01100100 a>> 00000001 = 00110010
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100011; 
            shifter.a = b01100100;
            shifter.b = b00000001;
            result = shifter.shift; 
            io_led[0] = b01100100;
            io_led[1] = b00000001;
            if (changeState.currentCounter == 26b1)
                if (result == b00110010) state.d = state.SRA_TEST2;
                else state.d = state.ERROR;
        state.SRA_TEST2: //Test case 34: 11100100 a>> 00000011 = 11111100
            test_case_counter.d = test_case_counter.q+1;
            shifter.alufn = b100011; 
            shifter.a = b11100100;
            shifter.b = b00000011;
            result = shifter.shift; 
            io_led[0] = b11100100;
            io_led[1] = b00000011;
            if (changeState.currentCounter == 26b1)
                if (result == b11111100) state.d = state.CMPEQ_TEST1;
                else state.d = state.ERROR;
    
        state.CMPEQ_TEST1: //Test case 35: 10011001 - 10011001 = 00000000; z=1,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110011; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPEQ_TEST2;
                else state.d = state.ERROR;
        state.CMPEQ_TEST2: //Test case 36: 10011001 - 10011000 = 00000001; z=0,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110011; 
            compare.z = 0;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 0;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.CMPLT_TEST1;
                else state.d = state.ERROR;
    
        state.CMPLT_TEST1: //Test case 37: 10011001 - 10011001 = 00000000; z=1,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110101; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.CMPLT_TEST2;
                else state.d = state.ERROR;
        state.CMPLT_TEST2: //Test case 38: 10011000 - 10011001 = 11111111; z=0,v=0,n=1
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110101; 
            compare.z = 0;
            compare.v = 0;
            compare.n = 1;
            result = compare.cmp; 
            io_led[0][0] = 0;
            io_led[0][1] = 0;
            io_led[0][2] = 1;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPLE_TEST1;
                else state.d = state.ERROR;
    
        state.CMPLE_TEST1: //Test case 39: 10011001 - 10011001 = 00000000; z=1,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110111; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPLE_TEST2;
                else state.d = state.ERROR;
        state.CMPLE_TEST2: //Test case 40: 10011000 - 10011001 = 11111111; z=0,v=0,n=1
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b110111; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPGT_TEST1;
                else state.d = state.ERROR;
    
        state.CMPGT_TEST1: //Test case 41: 10011001 - 10011001 = 00000000; z=1,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b111001; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPGT_TEST2;
                else state.d = state.ERROR;
        state.CMPGT_TEST2: //Test case 42: 10011011 - 10011001 = 00000010; z=0,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b111001; 
            compare.z = 0;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 0;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPGE_TEST1;
                else state.d = state.ERROR;
    
        state.CMPGE_TEST1: //Test case 43: 10011001 - 10011001 = 00000000; z=1,v=0,n=0
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b111011; 
            compare.z = 1;
            compare.v = 0;
            compare.n = 0;
            result = compare.cmp; 
            io_led[0][0] = 1;
            io_led[0][1] = 0;
            io_led[0][2] = 0;
            if (changeState.currentCounter == 26b1)
                if (result == b00000001) state.d = state.CMPGE_TEST2;
                else state.d = state.ERROR;
        state.CMPGE_TEST2: //Test case 44: 10011000 - 10011001 = 11111111; z=0,v=0,n=1
            test_case_counter.d = test_case_counter.q+1;
            compare.alufn = b111011; 
            compare.z = 0;
            compare.v = 0;
            compare.n = 1;
            result = compare.cmp; 
            io_led[0][0] = 0;
            io_led[0][1] = 0;
            io_led[0][2] = 1;
            if (changeState.currentCounter == 26b1)
                if (result == b00000000) state.d = state.END;
                else state.d = state.ERROR;
      }
    }
    io_led[2] = result;
    //if (result[7] == 1){
    //  binDec.value = 128 - result[6:0];
    //  seg.values = {c{1,1,1,1},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
    //}
    //else{
    //  binDec.value = result[6:0];
    //  seg.values = {c{1,1,1,0},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
    //}
    //io_seg = ~seg.seg; // connect segments to the driver
    //io_sel = ~seg.sel; // connect digit select to the driver       
  }
}