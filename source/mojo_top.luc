module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                  // reset signal
  sig mode;                 // mode signal to determine if doing auto or manual testing
  sig result[8];            // result signal
  sig invalid;              // show if alufn input is invalid
  
  
  .clk(clk) {   
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {                             
        timeinputname changeState;
        //dff test_case_counter[8];
        dff falufn[6];                  //declaring a flip flop as a variable for input alufn
        dff fa[8];                      //declaring a flip flop as a variable for input a
        dff fb[8];                      //declaring a flip flop as a variable for input b
        multi_seven_seg seg;            //declaring multi seven segment 
        fsm state(.clk(clk), #INIT(START)) = {START, TESTING, ERROR};      //declaring finite states
    }
  }
  
  adder adder;                          //declaring of adder module, called adder
  zvn zvn;                              //declaring of zvn module, called zvn
  mult mult;                            //declaring of multiplication module, called mult
  shifter8 shifter;                     //declaring of shifter module, called shifter8
  compare8 compare;                     //declaring of comparator module, called compare8
  boolean boolean;                      //declaring of boolean module, called boolean
  bin_to_dec binDec;                    //declaring of binary to decimal module, called bin_to_dec
  
  always {
  seg.values = {c{1,0,1,0},c{1,0,1,0},c{1,0,1,0},c{1,0,1,0}};          //instantiating of seven segment LED
  io_seg = ~seg.seg; // connect segments to the driver                 
  io_sel = ~seg.sel; // connect digit select to the driver   

      
  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  io_led[0] = c{0,0,0,0,0,0,0,0};                           //instantiate LED[0] to 0 (OFF)
  binDec.value = c{0,0,0,0,0,0,0,0};                        //instantiate binDec
  
      adder.alufn=io_dip[2][5:0];                           //input of alufn 
      adder.a = io_dip[1];                                  //input of a
      adder.b = io_dip[0];                                  //input of b
        
      zvn.a = io_dip[1];                                    //input of zvn a
      zvn.b = io_dip[0];                                    //input of zvn b
      zvn.alufn = io_dip[2][5:0];                           //input of zvn alufn
      
      mult.a = io_dip[1];                                   //input of multiplier a
      mult.b = io_dip[0];                                   //input of multiplier b
      mult.alufn = io_dip[2][5:0];                          //input of multiplier alufn
      
      shifter.alufn=io_dip[2][5:0];`                        //input of shifter alufn
      shifter.a = io_dip[1];                                //input of shifter a
      shifter.b = io_dip[0];                                //input of shifter b
      
      compare.alufn=io_dip[2][5:0];                         //input of comparator input alufn
      compare.z = zvn.z;                                    //input of comparator input z
      compare.v = zvn.v;                                    //input of comparator input v
      compare.n = zvn.n;                                    //input of comparator input n
      
      boolean.alufn=io_dip[2][5:0];                         //input of boolean input alufn
      boolean.a = io_dip[1];                                //input of boolean input a
      boolean.b = io_dip[0];                                //input of boolean input b
      
      result = 0;                                           //initialising result to value 0
      io_led[0] = 0;                                        //initialising i0_led[0] to 0
      io_led[1] = 0;                                        //initialising i0_led[1] to 0

  mode = io_dip[2][7];                                      //initialising mode as i0_dip[2][7]
  invalid = 0;                                              //initialising invalid to value 0
      
  case(mode) {
    b0:                                                     //when mode is b0
      if (state.q == state.START) {                         //start state
        falufn.d = io_dip[2][5:0];                          //alufn input from switch
        fa.d = io_dip[0];                                   //a input from switch
        fb.d = io_dip[1];                                   //b input from switch
      }
      if (state.q == state.TESTING) {                       //when mode is testing
        state.d = state.START;                              //change next state to start state
      }
    b1:                                                     //when mode is b1
      if (state.q == state.START) {
        falufn.d = b000000;                                 //initialising alufn as b000000
        fa.d = 0;                                           //initialising a as value 0 
        fb.d = 0;                                           //initialising b as value 0 
        state.d = state.TESTING;                            //change next state to testing state
      }
      
      adder.alufn=falufn.q;                                 //initialising falufn.q as adder input alufn
      adder.a = fa.q;                                       //initialising a as adder input fa.q
      adder.b = fb.q;                                       //initialising b as adder input fb.q
        
      zvn.a = fa.q;                                         //initialising a as zvn input a 
      zvn.b = fb.q;                                         //initialising b as zvn input b
      zvn.alufn=falufn.q;                                   //initialising falufn.q as zvn input alufn
      
      mult.a = fa.q;
      mult.b = fb.q;
      mult.alufn=falufn.q;
      
      shifter.alufn=falufn.q;
      shifter.a = fa.q;
      shifter.b = fb.q;
      
      compare.alufn=falufn.q;
      compare.z = zvn.z;
      compare.v = zvn.v;
      compare.n = zvn.n;
      
      boolean.alufn=falufn.q;
      boolean.a = fa.q;
      boolean.b = fb.q;
      
      if (changeState.currentCounter == 26b1 && state.q == state.TESTING) {
        fb.d = fb.q+1;
        if (fb.q == b00000001) {
          fb.d = 0;
          fa.d = fa.q+1;
          if (fa.q == b00000001) {
            fa.d = 0;
            falufn.d = falufn.q+1;
          }
        }
      }
    }
      case(falufn.q){
        b000000:        //ADD
          invalid = 0;
          result = adder.sum;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q+fb.q) {
              state.d = state.ERROR;     
          }
        b000001:        //SUB
          invalid = 0;
          result = adder.sum;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q-fb.q) {
              state.d = state.ERROR;     
          }
        b000010:        //MULTIPLICATION
          invalid = 0;
          result = mult.multiplied;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q*fb.q) {
              state.d = state.ERROR;     
          }
        b000011:        //ABS
          invalid = 0;
          result = mult.multiplied;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q*8b1) {
              state.d = state.ERROR;     
          }
        b011000:        //AND
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q&fb.q) {
              state.d = state.ERROR;  
          }
        b011110:        //OR
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q|fb.q) {
              state.d = state.ERROR;
              invalid = 2;}
        b010110:        //XOR
          invalid = 0;
          result = boolean.boole + 1; // SPECIFICALLY FOR DEMONSTRATING ERROR
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q^fb.q) {
              state.d = state.ERROR;     
          }
        b011010:        //A
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q) {
              state.d = state.ERROR;
              invalid = 2;}
        b011100:        //B
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fb.q) {
              state.d = state.ERROR;
              invalid = 2;}
        b010101:        //NOTA
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != ~(fa.q&fa.q)) {
              state.d = state.ERROR;
              invalid = 2;}
        b010011:        //NOTB
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != ~(fb.q&fb.q)) {
              state.d = state.ERROR;
              invalid = 2;}
        b010111:        //NAND
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != ~(fa.q&fb.q)) {
              state.d = state.ERROR;     
          }
        b010001:        //NOR
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != ~(fa.q|fb.q)) {
              state.d = state.ERROR;     
          }
        b011001:        //NXOR
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != ~(fa.q^fb.q)) {
              state.d = state.ERROR;     
          }
        b011111:        //CONSTANT-1
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != b11111111) {
              state.d = state.ERROR;     
          }
        b010000:        //CONSTANT0
          invalid = 0;
          result = boolean.boole;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != b00000000) {
              state.d = state.ERROR;    
          }
        b100000:        //SHL
          invalid = 0;
          result = shifter.shift;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q<<<fb.q[2:0]) { 
              state.d = state.ERROR;     
          }
        b100001:        //SHR
          invalid = 0;
          result = shifter.shift;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != fa.q>>>fb.q[2:0]) {
              state.d = state.ERROR;    
          }
        b100011:       //SRA
          invalid = 0;
          result = shifter.shift;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != $signed(fa.q)>>>fb.q[2:0]) {
              state.d = state.ERROR;     
          }
        b110011:       //a==b
          invalid = 0;
          result = compare.cmp;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != (fa.q==fb.q)) {
              state.d = state.ERROR;    
          }
        b110101:       //a<b
          invalid = 0;
          result = compare.cmp;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != (fa.q<fb.q)) {
              state.d = state.ERROR;     
          }
        b110111:       //a<=b
          invalid = 0;
          result = compare.cmp;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != (fa.q<=fb.q)) {
              state.d = state.ERROR;     
          }
        b111001:       //a>b
          invalid = 0;
          result = compare.cmp;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != (fa.q>fb.q)) {
              state.d = state.ERROR;     
          }
        b111011:      //a>=b
          invalid = 0;
          result = compare.cmp;
          if (mode == b1 && changeState.currentCounter == 26b1 && result != (fa.q>=fb.q)) {
              state.d = state.ERROR;    
          }
        default:
          result = 0;
          invalid = 1;
        }
      
    led = 0;
    led[5:0] = falufn.q;
    io_led[0] = fa.q;
    io_led[1] = fb.q;
    io_led[2] = result;
    if (result[7] == 1){           //if result<0, negative sign displayed, followed by number        
      binDec.value = 128 - result[6:0];                   
      seg.values = {c{1,0,1,1},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
    }
    else{                          //if result>=0, number itself is displayed 
      binDec.value = result[6:0];
      seg.values = {c{1,0,1,0},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
    }
    if (invalid == 1){             //display a dash when alufn input is invalid
      seg.values = {c{1,0,1,1},c{1,0,1,1},c{1,0,1,1},c{1,0,1,1}};
    }
        
  }
}
