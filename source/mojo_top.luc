module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [2][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                  // reset signal
  sig result[8];
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
    multi_seven_seg seg;}
    //fsm state = {ADDER, COMPARE, BOOLEAN, SHR, SHL, SHA}; 
  }
  
  adder adder;
  zvn zvn;
  mult mult;
  shifter8 shifter;
  compare8 compare;
  boolean boolean;
  bin_to_dec binDec;
  
  always {
  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  io_led[0] = c{0,0,0,0,0,0,0,0};
  binDec.value = c{0,0,0,0,0,0,0,0};
    
  adder.alufn=io_dip[2][5:0];
  adder.a = io_dip[1];
  adder.b = io_dip[0];
    
  zvn.a = io_dip[1];
  zvn.b = io_dip[0];
  zvn.alufn = io_dip[2][5:0];
  
  mult.a = io_dip[1];
  mult.b = io_dip[0];
  mult.alufn = io_dip[2][5:0];
  
  shifter.alufn=io_dip[2][5:0];
  shifter.a = io_dip[1];
  shifter.b = io_dip[0];
  
  compare.alufn=io_dip[2][5:0];
  compare.z = zvn.z;
  compare.v = zvn.v;
  compare.n = zvn.n;
  
  boolean.alufn=io_dip[2][5:0];
  boolean.a = io_dip[1];
  boolean.b = io_dip[0];
    
  //seg.values = {4h0,4h0,4h0,4h0};
  //io_seg = ~seg.seg; // connect segments to the driver
  //io_sel = ~seg.sel; // connect digit select to the driver  

  result = 0;
    
  case(io_dip[2][5:0]){
      
      b000000: 
        io_led[1] = adder.sum;
        result = adder.sum;
      b000001: 
        io_led[1] = adder.sum;
        result = adder.sum;
      b000010: 
        io_led[1] = mult.multiplied;
        result = mult.multiplied;
      b000011: 
        io_led[1] = mult.multiplied;
        result = mult.multiplied;
      b011000: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b011110: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b010110: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b011010: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b010101: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b010111: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b010001: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b011001: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b011111: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b010000: 
        io_led[1] = boolean.boole;
        result = boolean.boole;
      b100000: 
        io_led[1] = shifter.shift;
        result = shifter.shift;
      b100001: 
        io_led[1] = shifter.shift;
        result = shifter.shift;
      b100011: 
        io_led[1] = shifter.shift;
        result = shifter.shift;
      b100100: 
        io_led[1] = shifter.shift;
        result = shifter.shift;
      b100101: 
        io_led[1] = shifter.shift;
        result = shifter.shift;
      b110011: 
        io_led[1] = compare.cmp;
        result = compare.cmp;
      b110101: 
        io_led[1] = compare.cmp;
        result = compare.cmp;
      b110111: 
        io_led[1] = compare.cmp;
        result = compare.cmp;
      b111001: 
        io_led[1] = compare.cmp;
        result = compare.cmp;
      b111011: 
        io_led[1] = compare.cmp;
        result = compare.cmp;
      }
  if (result[7] == 1){
          binDec.value = 128 - result[6:0];
          seg.values = {c{1,1,1,1},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
          }
  else{
      binDec.value = result[6:0];
      seg.values = {c{1,1,1,0},binDec.digits[2],binDec.digits[1],binDec.digits[0]};
      }
      io_seg = ~seg.seg; // connect segments to the driver
      io_sel = ~seg.sel; // connect digit select to the driver       
  }
}