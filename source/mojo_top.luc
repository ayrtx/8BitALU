module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [1][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a[8],
    output b[8]
  ) {
  
  
  sig rst;                  // reset signal
  //sig result[8];
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      fsm state(.clk(clk), #INIT(TURNEDOFF)) = {ADD,SUB, MULT, ABS, AND, OR, XOR, A,B,NAND,NOR,XNOR,CONSTM1,CONST0,SHL,SHR,SRA,RL,RR,CMPEQ,CMPLT,CMPLE,CMPGT,CMPGE};
      // Finite state machine declaration. The starting sate is TURNEDOFF whereby the FPGA is in idle state.
      // The next 8 states are named corresponding to what the inputs are. The state is named in the format Carry-in, B, A. O is 0 while I is 1.
      //So if the state is OOI, the inputs for the carry and B are 0 while the input for A is 1.
      
      timeChange changeState; // instantiate a copy of timeChange and named it changeState
      }
  
  }
  
  adder adder;
  zvn zvn;
  mult mult;
  shifter8 shifter;
  compare8 compare;
  boolean boole;
  
  always {

  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  io_led[0] = 0;
    
  adder.alufn=io_dip[2][5:0];
  adder.a = io_dip[1];
  adder.b = io_dip[0];
    
  zvn.a = io_dip[1];
  zvn.b = io_dip[0];
  zvn.sum = adder.sum;
  zvn.alufn = io_dip[2][5:0];
  
  mult.a = io_dip[1];
  mult.b = io_dip[0];
  
  shifter.alufn=io_dip[2][5:0];
  shifter.a = io_dip[1];
  shifter.b = io_dip[0];
  
  compare.alufn=io_dip[2][5:0];
  compare.z = zvn.z;
  compare.v = zvn.v;
  compare.n = zvn.n;
  
  boole.alufn=io_dip[2][5:0];
  boole.a = io_dip[1];
  boole.b = io_dip[0];
  
  case(io_dip[2][6]){
  b1:
  case(io_dip[2][5:0]){
      000000: 
        io_led[0] = adder.sum;
      //  if (adder.sum != a + b) err;
      000001: io_led[0] = adder.sum;
      000010: io_led[0] = mult.multiplied;
      000011: io_led[0] = mult.multiplied;
      011000: io_led[0] = boolean.boole        //AND
      011110: io_led[0] = boolean.boole         //OR
      010110: io_led[0] = boolean.boole         //XOR
      011010: io_led[0] = boolean.boole         //"A" LDR
      010101: io_led[0] = boolean.boole         //"B"
      010111: io_led[0] = boolean.boole         //NAND
      010001: io_led[0] = boolean.boole         //NOR
      011001: io_led[0] = boolean.boole         //XNOR
      011111: io_led[0] = boolean.boole         //CONSTM1
      010000: io_led[0] = boolean.boole         //CONST0
      100000: io_led[0] = shifter.shift;
      100001: io_led[0] = shifter.shift;
      100011: io_led[0] = shifter.shift;
      100100: io_led[0] = shifter.shift;
      100101: io_led[0] = shifter.shift;
      110011: io_led[0] = compare.cmp;
      110101: io_led[0] = compare.cmp;
      110111: io_led[0] = compare.cmp;
      111001: io_led[0] = compare.cmp;
      111011: io_led[0] = compare.cmp;
      }
   b0:
    if (counter==26b1){
    b++;
    if(b>255||alufn[5:4] && b>7){
    b=0;
    a++;
    if(a>255){
        a=0;
        alufn.next;   
    }    
  }
}
