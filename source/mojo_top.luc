module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    //output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    //output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    //output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [1][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  
  sig rst;                  // reset signal
  //sig result[8];
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    //fsm state = {ADDER, COMPARE, BOOLEAN, SHR, SHL, SHA}; 
  }
  
  adder adder;
  zvn zvn;
  mult mult;
  shifter8 shifter;
  compare8 compare;
  divMod divMod;
  
  always {
  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset 
    
  io_led[0] = 0;
    
  adder.alufn=io_dip[2][5:0];
  adder.a = io_dip[1];
  adder.b = io_dip[0];
    
  zvn.a = io_dip[1];
  zvn.b = io_dip[0];
  zvn.sum = adder.sum;
  zvn.alufn = io_dip[2][5:0];
  
  mult.a = io_dip[1];
  mult.b = io_dip[0];
  
  shifter.alufn=io_dip[2][5:0];
  shifter.a = io_dip[1];
  shifter.b = io_dip[0];
  
  compare.alufn=io_dip[2][5:0];
  compare.z = zvn.z;
  compare.v = zvn.v;
  compare.n = zvn.n;
  
  divMod.alufn=io_dip[2][5:0];
  divMod.a = io_dip[1];
  divMod.b = io_dip[0];
    
  case(io_dip[2][5:0]){
      000000: 
        io_led[0] = adder.sum;
      //  if (adder.sum != a + b) err;
      000001: io_led[0] = adder.sum;
      000010: io_led[0] = mult.multiplied;
      //000011: io_led[0] = mult.multiplied;
      //000100: io_led[0] = divMod.out;
      //000110: io_led[0] = divMod.out;
      //011000: AND
      //011110: OR
      //010110: XOR
      //011010: "A" LDR
      //010101: "B"
      //010111: NAND
      //010001: NOR
      //011001: XNOR
      //011111: CONST1
      //010000: CONST0
      100000: io_led[0] = shifter.shift;
      100001: io_led[0] = shifter.shift;
      100011: io_led[0] = shifter.shift;
      100100: io_led[0] = shifter.shift;
      100101: io_led[0] = shifter.shift;
      110011: io_led[0] = compare.cmp;
      110101: io_led[0] = compare.cmp;
      110111: io_led[0] = compare.cmp;
      111001: io_led[0] = compare.cmp;
      111011: io_led[0] = compare.cmp;
      }  
  }
}